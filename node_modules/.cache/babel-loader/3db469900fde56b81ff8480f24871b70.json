{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/website/src/components/slider/slider.js\";\n\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport SliderContent from './sliderContent';\nimport Slide from './slide';\nimport Arrow from './arrow';\nimport Window from '../window';\n/**\n * @function Slider\n */\n\nconst Slider = props => {\n  const [windowWidth, setWindowWidth] = useState(getWindowDimensions());\n\n  const getWidth = () => window.innerWidth;\n\n  function getWindowDimensions() {\n    const {\n      innerWidth: width,\n      innerHeight: height\n    } = window;\n    return {\n      width\n    };\n  }\n\n  useEffect(() => {\n    console.log(windowWidth);\n\n    function handleResize() {\n      setWindowWidth(getWindowDimensions());\n      console.log(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  });\n  const {\n    translate,\n    transition,\n    activeIndex\n  } = state;\n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({ ...state,\n        translate: 0,\n        activeIndex: 0\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    });\n  };\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({ ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    });\n  };\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, jsx(SliderContent, {\n    translate: translate,\n    transition: transition,\n    width: getWidth() * props.slides.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, props.slides.map((slide, i) => jsx(Slide, {\n    key: slide + i,\n    content: slide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }))), jsx(Arrow, {\n    direction: \"left\",\n    handleClick: prevSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), jsx(Arrow, {\n    direction: \"right\",\n    handleClick: nextSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst SliderCSS = css`\n  position: relative;\n  object-fit:cover;\n  height: 80vh;\n  width: 80vw;\n  margin: 0 auto;\n  overflow: hidden;\n`;\nexport default Slider;","map":{"version":3,"sources":["/Users/marshoward/Development/code/website/src/components/slider/slider.js"],"names":["React","useState","useEffect","useRef","css","jsx","SliderContent","Slide","Arrow","Window","Slider","props","windowWidth","setWindowWidth","getWindowDimensions","getWidth","window","innerWidth","width","innerHeight","height","console","log","handleResize","addEventListener","removeEventListener","state","setState","activeIndex","translate","transition","nextSlide","slides","length","prevSlide","SliderCSS","map","slide","i"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react'\nimport { css, jsx } from '@emotion/react'\nimport SliderContent from './sliderContent'\nimport Slide from './slide'\nimport Arrow from './arrow'\nimport Window from '../window'\n\n\n/**\n * @function Slider\n */\nconst Slider = props => {\nconst [windowWidth, setWindowWidth] = useState(getWindowDimensions());\nconst getWidth = () => window.innerWidth\n\n  function getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width\n    };\n  }\n\n\n  useEffect(() => {\n    console.log(windowWidth);  \n    function handleResize() {\n      setWindowWidth(getWindowDimensions()); \n      console.log(getWindowDimensions());   \n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  })\n\n  const { translate, transition, activeIndex } = state\n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({\n        ...state,\n        translate: 0,\n        activeIndex: 0\n      })\n    }\n\n    setState({\n      ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    })\n  }\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({\n        ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      })\n    }\n\n    setState({\n      ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    })\n  }\n  \n  return (\n    <div css={SliderCSS}>\n      <SliderContent\n        translate={translate}\n        transition={transition}\n        width={getWidth() * props.slides.length}\n      >\n        {props.slides.map((slide, i) => (\n          <Slide key={slide + i} content={slide} />\n        ))}\n      </SliderContent>\n\n      <Arrow direction=\"left\" handleClick={prevSlide} />\n      <Arrow direction=\"right\" handleClick={nextSlide} />\n    </div>\n  )\n}\n\n\n\nconst SliderCSS = css`\n  position: relative;\n  object-fit:cover;\n  height: 80vh;\n  width: 80vw;\n  margin: 0 auto;\n  overflow: hidden;\n`\nexport default Slider"]},"metadata":{},"sourceType":"module"}