{"ast":null,"code":"import React,{useLayoutEffect,useState,useEffect}from'react';import ReactDOM from'react-dom';function MoreInfo(){return/*#__PURE__*/React.createElement(\"div\",{className:\"moreInfo\"},/*#__PURE__*/React.createElement(\"div\",{className:\"section\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"subHeader\"},\"Concept\"),/*#__PURE__*/React.createElement(\"text\",null,\"I ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),\"Originally I mapped out two interfaces one for the browser and one for mobile before deciding to keep the later for both instances.\")),/*#__PURE__*/React.createElement(\"div\",{className:\"sketches\"},/*#__PURE__*/React.createElement(\"img\",{className:\"sketch\",src:require('../../images/DDsketch1.png'),alt:\"sketch\"}),/*#__PURE__*/React.createElement(\"img\",{className:\"sketch\",src:require('../../images/DDsketch2.png'),alt:\"sketch\"}),/*#__PURE__*/React.createElement(\"img\",{className:\"sketch\",src:require('../../images/DDsketch3.png'),alt:\"sketch\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"section\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Under The Hood\"),/*#__PURE__*/React.createElement(\"p\",null,\"As mentioned above the frontend consists of only vanilla JS and Ruby on Rails was used to build out an application programming interface (API). Here I built out associations between game, dare, and player models. I also created join tables to preserve the history of a game\\u2019s turns and a player\\u2019s turns. I manually created and seeded each dare and balanced the point and shot values to match the extremeness of a dare.\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),\"When starting a game players are prompted to enter their names which calls the create method first from the games controller and then from the players controller. This adds a game record and a player record to that game. Once all players are entered and a game begins, a random number generator is used to gather a number that corresponds with a record of a dare.\")));}export default MoreInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/website/src/components/doubleDog/moreInfo.js"],"names":["React","useLayoutEffect","useState","useEffect","ReactDOM","MoreInfo","require"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,eAAhB,CAAiCC,QAAjC,CAA2CC,SAA3C,KAA2D,OAA3D,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CAEA,QAASC,CAAAA,QAAT,EAAmB,CAClB,mBACC,2BAAK,SAAS,CAAE,UAAhB,eACC,2BAAK,SAAS,CAAE,SAAhB,eACC,0BAAI,SAAS,CAAE,WAAf,YADD,cAEC,0kCAEC,8BAFD,cAGC,8BAHD,uIAFD,CADD,cAUC,2BAAK,SAAS,CAAC,UAAf,eACC,2BAAK,SAAS,CAAC,QAAf,CAAwB,GAAG,CAAEC,OAAO,CAAC,4BAAD,CAApC,CAAoE,GAAG,CAAC,QAAxE,EADD,cAEC,2BAAK,SAAS,CAAC,QAAf,CAAwB,GAAG,CAAEA,OAAO,CAAC,4BAAD,CAApC,CAAoE,GAAG,CAAC,QAAxE,EAFD,cAGC,2BAAK,SAAS,CAAC,QAAf,CAAwB,GAAG,CAAEA,OAAO,CAAC,4BAAD,CAApC,CAAoE,GAAG,CAAC,QAAxE,EAHD,CAVD,cAeC,2BAAK,SAAS,CAAE,SAAhB,eACC,+CADD,cAEC,ydAEC,8BAFD,cAGC,8BAHD,+WAFD,CAfD,CADD,CA2BA,CACD,cAAeD,CAAAA,QAAf","sourcesContent":["import React, { useLayoutEffect, useState ,useEffect} from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction MoreInfo(){\n\treturn(\n\t\t<div className= \"moreInfo\">\n\t\t\t<div className= \"section\"> \n\t\t\t\t<h3 className= \"subHeader\">Concept</h3>\n\t\t\t\t<text>\n\t\t\t\t\tI ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\n\t\t\t\t\t<br/>\n\t\t\t\t\t<br/>\n\t\t\t\t\tOriginally I mapped out two interfaces one for the browser and one for mobile before deciding to keep the later for both instances.\t\t\t\t\t\n\t\t\t\t</text>\n\t\t\t</div>\n\t\t\t<div className='sketches'>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch1.png')} alt=\"sketch\"/>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch2.png')} alt=\"sketch\"/>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch3.png')} alt=\"sketch\"/>\n\t\t\t</div>\n\t\t\t<div className= \"section\"> \n\t\t\t\t<h3>Under The Hood</h3>\n\t\t\t\t<p>\n\t\t\t\t\tAs mentioned above the frontend consists of only vanilla JS and Ruby on Rails was used to build out an application programming interface (API). Here I built out associations between game, dare, and player models. I also created join tables to preserve the history of a game’s turns and a player’s turns. I manually created and seeded each dare and balanced the point and shot values to match the extremeness of a dare. \n\t\t\t\t\t<br/>\n\t\t\t\t\t<br/>\n\t\t\t\t\tWhen starting a game players are prompted to enter their names which calls the create method first from the games controller and then from the players controller. This adds a game record and a player record to that game. Once all players are entered and a game begins, a random number generator is used to gather a number that corresponds with a record of a dare.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default MoreInfo"]},"metadata":{},"sourceType":"module"}