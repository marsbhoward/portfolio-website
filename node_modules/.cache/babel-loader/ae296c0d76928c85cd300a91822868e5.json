{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/website/src/components/doubleDog/moreInfo.js\";\nimport React, { useLayoutEffect, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction MoreInfo() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"moreInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"subHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 4\n    }\n  }, \"Concept\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 4\n    }\n  }, \"I ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }\n  }, \"Under The Hood\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }\n  }, \"For this single page web application (SPA) I utilized Ruby on Rails to build out a database that consists of the streaming service providers\"));\n}\n\nexport default MoreInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/website/src/components/doubleDog/moreInfo.js"],"names":["React","useLayoutEffect","useState","useEffect","ReactDOM","MoreInfo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,SAASC,QAAT,GAAmB;AAClB,sBACC;AAAK,IAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAE,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kiCAFD,eAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJAND,CADD;AAYA;;AACD,eAAeA,QAAf","sourcesContent":["import React, { useLayoutEffect, useState ,useEffect} from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction MoreInfo(){\n\treturn(\n\t\t<div className= \"moreInfo\">\n\t\t\t<h3 className= \"subHeader\">Concept</h3>\n\t\t\t<p>\n\t\t\t\tI ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\n\t\t\t</p>\n\t\t\t<h3>Under The Hood</h3>\n\t\t\t<p>\n\t\t\t\tFor this single page web application (SPA) I utilized Ruby on Rails to build out a database that consists of the streaming service providers\n\t\t\t</p>\n\t\t</div>\n\t)\n}\nexport default MoreInfo"]},"metadata":{},"sourceType":"module"}