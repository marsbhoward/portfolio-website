{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/website/src/components/doubleDog/moreInfo.js\";\nimport React, { useLayoutEffect, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction MoreInfo() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"moreInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"subHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, \"Concept\"), /*#__PURE__*/React.createElement(\"text\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"I ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 1\n    }\n  }), \"Originally I mapped out two interfaces one for the browser and one for mobile before deciding to keep the later for both instances.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sketches\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"sketch\",\n    src: require('../../images/DDsketch1.png'),\n    alt: \"sketch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"sketch\",\n    src: require('../../images/DDsketch2.png'),\n    alt: \"sketch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"sketch\",\n    src: require('../../images/DDsketch3.png'),\n    alt: \"sketch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, \"Under The Hood\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, \"As mentioned above I used Ruby on Rails to build out an application programming interface (API). Here I built out associations between game, dare, and player models. I also created join tables to preserve the history of a game\\u2019s turns and a player\\u2019s turns. I manually created and seeded each dare and balanced the point and shot values to match the extremeness of a dare. When starting a game players are prompted to enter their names which calls the create method first from the games controller and then from the players controller. This adds a game record and a player record to that game. Once all players are entered and a game begins, a random number generator is used to gather a number that corresponds with a record of a dare.\")));\n}\n\nexport default MoreInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/website/src/components/doubleDog/moreInfo.js"],"names":["React","useLayoutEffect","useState","useEffect","ReactDOM","MoreInfo","require"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,SAASC,QAAT,GAAmB;AAClB,sBACC;AAAK,IAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAE,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gjCAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFI,wIAFD,CADD,eAUC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,GAAG,EAAEC,OAAO,CAAC,4BAAD,CAApC;AAAoE,IAAA,GAAG,EAAC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,GAAG,EAAEA,OAAO,CAAC,4BAAD,CAApC;AAAoE,IAAA,GAAG,EAAC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,eAGC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,GAAG,EAAEA,OAAO,CAAC,4BAAD,CAApC;AAAoE,IAAA,GAAG,EAAC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CAVD,eAeC;AAAK,IAAA,SAAS,EAAE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ivBAFD,CAfD,CADD;AAyBA;;AACD,eAAeD,QAAf","sourcesContent":["import React, { useLayoutEffect, useState ,useEffect} from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction MoreInfo(){\n\treturn(\n\t\t<div className= \"moreInfo\">\n\t\t\t<div className= \"section\"> \n\t\t\t\t<h3 className= \"subHeader\">Concept</h3>\n\t\t\t\t<text>\n\t\t\t\t\tI ended up going to a friend's house for a New Years party one year, and we wound up playing one of those drinking card games. I begun to think on how I could improve on this concept. First thing I thought was that an app with a random number generator would be more efficient than a (probably reluctant) designated dealer. Second, I wanted the app to be (mostly) self contained. So if a dare involves a coin flip or anything timer related a pop up appears with the corresponding tool. The biggest ideal I wanted to incorporate was a bit of competitiveness, mixed with risk vs reward, and the thrill of victory. To achieve this I gave each game a cap of 10 points and each dare a point value ranging from -1 to 3 and a shot value ranging from 1 to 3 depending on how extreme the dare is. The caveat, however is that a player can not pass a dare if doing so will put them below zero and must either do the dare or take the amount of shots that is presented. So a player has to juggle what they are willing to do, their score, and their alcohol intake.\n<br/>\nOriginally I mapped out two interfaces one for the browser and one for mobile before deciding to keep the later for both instances.\n\n\t\t\t\t</text>\n\t\t\t</div>\n\t\t\t<div className='sketches'>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch1.png')} alt=\"sketch\"/>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch2.png')} alt=\"sketch\"/>\n\t\t\t\t<img className='sketch' src={require('../../images/DDsketch3.png')} alt=\"sketch\"/>\n\t\t\t</div>\n\t\t\t<div className= \"section\"> \n\t\t\t\t<h3>Under The Hood</h3>\n\t\t\t\t<p>\n\t\t\t\t\tAs mentioned above I used Ruby on Rails to build out an application programming interface (API). Here I built out associations between game, dare, and player models. I also created join tables to preserve the history of a game’s turns and a player’s turns. I manually created and seeded each dare and balanced the point and shot values to match the extremeness of a dare. \nWhen starting a game players are prompted to enter their names which calls the create method first from the games controller and then from the players controller. This adds a game record and a player record to that game. Once all players are entered and a game begins, a random number generator is used to gather a number that corresponds with a record of a dare.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default MoreInfo"]},"metadata":{},"sourceType":"module"}